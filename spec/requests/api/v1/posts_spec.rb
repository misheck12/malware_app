require 'rails_helper'

RSpec.describe "Api::V1::Posts", type: :request do
  let(:user) { create(:user) } # Assuming you have a user factory
  let(:post) { create(:post, user: user) }

  describe "GET /index" do
    before do
      post
      get api_v1_posts_path
    end

    it "returns a success status" do
      expect(response).to have_http_status(:success)
    end

    it "returns a list of posts" do
      expect(json_response.size).to eq(1)
      expect(json_response.first["id"]).to eq(post.id)
    end
  end

  describe "POST /create" do
    context "with valid attributes" do
      let(:valid_attributes) { { post: { user_id: user.id, title: "Test Post", body: "This is a test post.", date: "2023-08-13" } } }

      it "creates a new post" do
        expect {
          post api_v1_posts_path, params: valid_attributes
        }.to change(Post, :count).by(1)
      end

      it "returns a success status" do
        post api_v1_posts_path, params: valid_attributes
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid attributes" do
      let(:invalid_attributes) { { post: { user_id: user.id, title: nil, body: "This is a test post.", date: "2023-08-13" } } }

      it "does not create a new post" do
        expect {
          post api_v1_posts_path, params: invalid_attributes
        }.not_to change(Post, :count)
      end

      it "returns an error status" do
        post api_v1_posts_path, params: invalid_attributes
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PUT /update" do
    let(:valid_attributes) { { post: { title: "Updated Post" } } }

    it "updates the post" do
      put api_v1_post_path(post), params: valid_attributes
      post.reload
      expect(post.title).to eq("Updated Post")
    end

    it "returns a success status" do
      put api_v1_post_path(post), params: valid_attributes
      expect(response).to have_http_status(:success)
    end
  end

  describe "DELETE /destroy" do
    before { post }

    it "deletes the post" do
      expect {
        delete api_v1_post_path(post)
      }.to change(Post, :count).by(-1)
    end

    it "returns a success status" do
      delete api_v1_post_path(post)
      expect(response).to have_http_status(:no_content)
    end
  end

  private

  def json_response
    JSON.parse(response.body)
  end
end
