# spec/controllers/api/v1/faqs_controller_spec.rb

require 'rails_helper'

RSpec.describe Api::V1::FaqsController, type: :controller do
  let(:faq) { create(:faq) } # Assuming you have FactoryBot set up for Faq

  describe "GET #index" do
    it "returns a success response" do
      get :index
      expect(response).to have_http_status(:success)
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      get :show, params: { id: faq.id }
      expect(response).to have_http_status(:success)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new faq" do
        expect {
          post :create, params: { faq: attributes_for(:faq) }
        }.to change(Faq, :count).by(1)
      end

      it "returns a success response" do
        post :create, params: { faq: attributes_for(:faq) }
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid params" do
      it "does not create a new faq" do
        # Assuming invalid attributes for faq is an empty hash
        expect {
          post :create, params: { faq: {} }
        }.not_to change(Faq, :count)
      end

      it "returns an error response" do
        post :create, params: { faq: {} }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) { { question: 'UpdatedQuestion', answer: 'UpdatedAnswer' } }

      it "updates the requested faq" do
        put :update, params: { id: faq.id, faq: new_attributes }
        faq.reload
        expect(faq.question).to eq('UpdatedQuestion')
        expect(faq.answer).to eq('UpdatedAnswer')
      end

      it "returns a success response" do
        put :update, params: { id: faq.id, faq: new_attributes }
        expect(response).to have_http_status(:success)
      end
    end

    context "with invalid params" do
      it "does not update the faq" do
        original_question = faq.question
        put :update, params: { id: faq.id, faq: { question: nil } }
        faq.reload
        expect(faq.question).to eq(original_question)
      end

      it "returns an error response" do
        put :update, params: { id: faq.id, faq: { question: nil } }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested faq" do
      faq_to_delete = create(:faq)
      expect {
        delete :destroy, params: { id: faq_to_delete.id }
      }.to change(Faq, :count).by(-1)
    end

    it "returns a success response" do
      delete :destroy, params: { id: faq.id }
      expect(response).to have_http_status(:no_content)
    end
  end
end
