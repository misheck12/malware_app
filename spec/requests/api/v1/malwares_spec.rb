require 'rails_helper'

RSpec.describe "Api::V1::Malwares", type: :request do
  let(:malware) { create(:malware) }

  describe "GET /index" do
    before do
      malware
      get api_v1_malwares_path
    end

    it "returns a success status" do
      expect(response).to have_http_status(:success)
    end

    it "returns a list of malwares" do
      expect(json_response.size).to eq(1)
      expect(json_response.first["id"]).to eq(malware.id)
    end
  end

  describe "POST /create" do
    context "with valid attributes" do
      let(:valid_attributes) { { malware: { name: "Test Malware", category: "Virus", symptoms: "Slow system", impact: "Data theft", date_detected: "2023-08-13" } } }

      it "creates a new malware" do
        expect {
          post api_v1_malwares_path, params: valid_attributes
        }.to change(Malware, :count).by(1)
      end

      it "returns a success status" do
        post api_v1_malwares_path, params: valid_attributes
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid attributes" do
      let(:invalid_attributes) { { malware: { name: nil, category: "Virus", symptoms: "Slow system", impact: "Data theft", date_detected: "2023-08-13" } } }

      it "does not create a new malware" do
        expect {
          post api_v1_malwares_path, params: invalid_attributes
        }.not_to change(Malware, :count)
      end

      it "returns an error status" do
        post api_v1_malwares_path, params: invalid_attributes
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PUT /update" do
    let(:valid_attributes) { { malware: { name: "Updated Malware" } } }

    it "updates the malware" do
      put api_v1_malware_path(malware), params: valid_attributes
      malware.reload
      expect(malware.name).to eq("Updated Malware")
    end

    it "returns a success status" do
      put api_v1_malware_path(malware), params: valid_attributes
      expect(response).to have_http_status(:success)
    end
  end

  describe "DELETE /destroy" do
    before { malware }

    it "deletes the malware" do
      expect {
        delete api_v1_malware_path(malware)
      }.to change(Malware, :count).by(-1)
    end

    it "returns a success status" do
      delete api_v1_malware_path(malware)
      expect(response).to have_http_status(:no_content)
    end
  end

  private

  def json_response
    JSON.parse(response.body)
  end
end
