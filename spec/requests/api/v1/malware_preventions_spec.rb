# spec/controllers/api/v1/malware_preventions_controller_spec.rb

require 'rails_helper'

RSpec.describe Api::V1::MalwarePreventionsController, type: :controller do
  let(:malware) { create(:malware) }
  let(:prevention) { create(:prevention) }
  let(:malware_prevention) { create(:malware_prevention, malware: malware, prevention: prevention) }

  describe "GET #index" do
    it "returns a success response" do
      get :index
      expect(response).to have_http_status(:success)
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      get :show, params: { id: malware_prevention.id }
      expect(response).to have_http_status(:success)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new malware_prevention" do
        expect {
          post :create, params: { malware_prevention: { malware_id: malware.id, prevention_id: prevention.id } }
        }.to change(MalwarePrevention, :count).by(1)
      end

      it "returns a success response" do
        post :create, params: { malware_prevention: { malware_id: malware.id, prevention_id: prevention.id } }
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid params" do
      it "does not create a new malware_prevention" do
        expect {
          post :create, params: { malware_prevention: { malware_id: nil, prevention_id: nil } }
        }.not_to change(MalwarePrevention, :count)
      end

      it "returns an error response" do
        post :create, params: { malware_prevention: { malware_id: nil, prevention_id: nil } }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PUT #update" do
    let(:new_malware) { create(:malware) }
    let(:new_prevention) { create(:prevention) }

    context "with valid params" do
      it "updates the requested malware_prevention" do
        put :update, params: { id: malware_prevention.id, malware_prevention: { malware_id: new_malware.id, prevention_id: new_prevention.id } }
        malware_prevention.reload
        expect(malware_prevention.malware).to eq(new_malware)
        expect(malware_prevention.prevention).to eq(new_prevention)
      end

      it "returns a success response" do
        put :update, params: { id: malware_prevention.id, malware_prevention: { malware_id: new_malware.id, prevention_id: new_prevention.id } }
        expect(response).to have_http_status(:success)
      end
    end

    context "with invalid params" do
      it "does not update the malware_prevention" do
        original_malware = malware_prevention.malware
        original_prevention = malware_prevention.prevention
        put :update, params: { id: malware_prevention.id, malware_prevention: { malware_id: nil, prevention_id: nil } }
        malware_prevention.reload
        expect(malware_prevention.malware).to eq(original_malware)
        expect(malware_prevention.prevention).to eq(original_prevention)
      end

      it "returns an error response" do
        put :update, params: { id: malware_prevention.id, malware_prevention: { malware_id: nil, prevention_id: nil } }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested malware_prevention" do
      malware_prevention_to_delete = create(:malware_prevention)
      expect {
        delete :destroy, params: { id: malware_prevention_to_delete.id }
      }.to change(MalwarePrevention, :count).by(-1)
    end

    it "returns a success response" do
      delete :destroy, params: { id: malware_prevention.id }
      expect(response).to have_http_status(:no_content)
    end
  end
end
